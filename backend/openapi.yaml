swagger: "2.0"
info:
  description: "Homework description"
  version: "1.0.0"
  title: "LAB FE NodeJS HW #3"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "Kyrylo_Yezhov@epam.com"
host: "localhost:8080"
basePath: "/"
tags:
- name: "User"
  description: "Everything about your User"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "Category"
  description: "Info about categories"
- name: ""
  description: "Info about tasks"
schemes:
- "http"
paths:
  /api/users/me:
    get:
      tags:
      - "User"
      summary: "Get user's profile info"
      description: "User can request only his own profile info"
      operationId: "getProfileInfo"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              user:
                $ref: '#/definitions/User'
        "400":
          description: "Bad request"
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: "Internal server error"
          schema:
            $ref: '#/definitions/Error'
      security:
      - jwt_token: []
    delete:
      tags:
      - "User"
      summary: "Delete user's profile"
      description: "User can delete only his own profile info"
      operationId: "deleteProfile"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
            description: "Success"
            schema:
                type: "object"
                properties:
                  message: 
                    type: string
                    example: "Profile deleted successfully"
        "400":
          description: "Bad request"
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: "Internal server error"
          schema:
            $ref: '#/definitions/Error'
      security:
      - jwt_token: []
  /api/users/me/password:
    patch:
      tags:
      - "User"
      summary: "Change user's password"
      description: "Change user's password"
      operationId: "changeProfilePassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "new_password"
        schema:
          type: "object"
          properties:
            oldPassword:
              type: string
            newPassword:
              type: string
      responses:
        "200":
            description: "Success"
            schema:
                type: "object"
                properties:
                  message: 
                    type: string
                    example: "Password changed successfully"
        "400":
          description: "Bad request"
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: "Internal server error"
          schema:
            $ref: '#/definitions/Error'
      security:
      - jwt_token: []
  /api/auth/register:
    post:
      tags:
      - "Auth"
      summary: "Register a new system user(Shipper or Driver)"
      description: "Create new profile"
      operationId: "createProfile"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "credentials"
        schema:
          $ref: "#/definitions/registrationCredentials"
      responses:
        "200":
            description: "Success"
            schema:
                type: "object"
                properties:
                  message: 
                    type: string
                    example: "Profile created successfully"
        "400":
          description: "Bad request"
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: "Internal server error"
          schema:
            $ref: '#/definitions/Error'
  /api/auth/login:
    post:
      tags:
      - "Auth"
      summary: "Login"
      description: "Login into the system, role should be detected automatically"
      operationId: "login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "credentials"
        schema:
          $ref: "#/definitions/Credentials"
      responses:
        "200":
          description: "Success"
          schema:
            type: "object"
            properties:
              jwt_token: 
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0b3B0YWwuY29tIiwiZXhwIjoxNDI2NDIwODAwLCJodHRwOi8vdG9wdGFsLmNvbS9qd3RfY2xhaW1zL2lzX2FkbWluIjp0cnVlLCJjb21wYW55IjoiVG9wdGFsIiwiYXdlc29tZSI6dHJ1ZX0.yRQYnWzskCZUxPwaQupWkiUzKELZ49eM7oWxAQK_ZXw"
        "400":
          description: "Bad request"
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: "Internal server error"
          schema:
            $ref: '#/definitions/Error'
  /api/auth/forgot_password:
    post:
      tags:
      - "Auth"
      summary: "Forgot password"
      description: "(Optional) Forgot password option"
      operationId: "forgotPassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "credentials"
        schema:
          properties:
            email:
              type: "string"
              example: "kyrylo@gmail.com"
      responses:
        "200":
            description: "Success"
            schema:
                type: "object"
                properties:
                  message: 
                    type: string
                    example: "New password sent to your email address"
        "400":
          description: "Bad request"
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: "Internal server error"
          schema:
            $ref: '#/definitions/Error'
  /api/categories:
    get:
      tags:
      - "Category"
      summary: "Get user's categories"
      description: "Retrieve the list of categories for authorized user(abailable only for driver role)"
      operationId: "getUserCategories"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
          schema:
              type: "object"
              properties: 
                  categories:
                      type: array
                      items:
                          $ref: "#/definitions/Category"
        "400":
          description: "Bad request"
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: "Internal server error"
          schema:
            $ref: '#/definitions/Error'
      security:
      - jwt_token: []
    post:
        tags:
        - "Category"
        summary: "Add Category for User"
        description: "Add Category for User(abailable only for driver role)"
        operationId: "addUserCategory"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "Category payload"
          schema:
            properties:
              type:
                type: "string"
                enum: ["SPRINTER", "SMALL STRAIGHT", "LARGE STRAIGHT"]
                example: "SPRINTER"
        responses:
            "200":
                description: "Success"
                schema:
                    type: "object"
                    properties:
                      message: 
                        type: string
                        example: "Category created successfully"
            "400":
                description: "Bad request"
                schema:
                    $ref: '#/definitions/Error'
            "500":
                description: "Internal server error"
                schema:
                    $ref: '#/definitions/Error'
        security:
        - jwt_token: []
  /api/categories/{id}:
    get:
        tags:
        - "Category"
        summary: "Get user's category by id"
        description: "Get user's category by id(abailable only for driver role)"
        operationId: "getUserCategoryById"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "id"
          description: "Category id"
          required: true
          type: string
        responses:
            "200":
              description: "Success"
              schema:
                type: object
                properties:
                  category:
                      $ref: '#/definitions/Category'
            "400":
              description: "Bad request"
              schema:
                  $ref: '#/definitions/Error'
            "500":
              description: "Internal server error"
              schema:
                  $ref: '#/definitions/Error'
        security:
        - jwt_token: []
    put:
        tags:
        - "Category"
        summary: "Update user's category by id"
        description: "Update user's category by id (abailable only for driver role)"
        operationId: "updateUserCategoryById"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "id"
          description: "Category id"
          required: true
          type: string
        - in: "body"
          name: "Category payload"
          schema:
            properties:
              type:
                type: "string"
                enum: ["SPRINTER", "SMALL STRAIGHT", "LARGE STRAIGHT"]
                example: "SPRINTER"
        responses:
            "200":
                description: "Success"
                schema:
                    type: "object"
                    properties:
                      message: 
                        type: string
                        example: "Category details changed successfully"
            "400":
              description: "Bad request"
              schema:
                  $ref: '#/definitions/Error'
            "500":
              description: "Internal server error"
              schema:
                  $ref: '#/definitions/Error'
        security:
        - jwt_token: []
    delete:
        tags:
        - "Category"
        summary: "Delete user's category by id"
        description: "Delete user's category by id (abailable only for driver role)"
        operationId: "deleteUserCategoryById"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "id"
          description: "Category id"
          required: true
          type: string
        responses:
            "200":
                description: "Success"
                schema:
                    type: "object"
                    properties:
                      message: 
                        type: string
                        example: "Category deleted successfully"
            "400":
              description: "Bad request"
              schema:
                  $ref: '#/definitions/Error'
            "500":
              description: "Internal server error"
              schema:
                  $ref: '#/definitions/Error'
        security:
        - jwt_token: []
  /api/categories/{id}/assign:
    post:
        tags:
        - "Category"
        summary: "Assign category to user by id"
        description: "Assign category to user by id (abailable only for driver role)"
        operationId: "assignUserCategoryById"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "id"
          description: "Category id"
          required: true
          type: string
        responses:
            "200":
                description: "Success"
                schema:
                    type: "object"
                    properties:
                      message: 
                        type: string
                        example: "Category assigned successfully"
            "400":
              description: "Bad request"
              schema:
                  $ref: '#/definitions/Error'
            "500":
              description: "Internal server error"
              schema:
                  $ref: '#/definitions/Error'
        security:
        - jwt_token: []
  /api/tasks:
    get:
      tags:
      - ""
      summary: "Get user's tasks"
      description: "Retrieve the list of tasks for authorized user, returns list of completed and active tasks for Driver and list of all available tasks for Shipper"
      operationId: "getUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "query"
          name: "status"
          description: "Filter by task status"
          required: false
          type: string
        - in: "query"
          name: "limit"
          description: "Limit for records per request, pagination parameter(default: 10, max: 50)"
          required: false
          type: integer
        - in: "query"
          name: "offset"
          description: "Offset for records, pagination parameter(default: 0)"
          required: false
          type: integer
      responses:
        "200":
          description: "Success"
          schema:
            type: "object"
            properties: 
                tasks:
                    type: array
                    items:
                        $ref: "#/definitions/"
        "400":
          description: "Bad request"
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: "Internal server error"
          schema:
            $ref: '#/definitions/Error'
      security:
      - jwt_token: []
    post:
        tags:
        - ""
        summary: "Add  for User"
        description: "Add  for User(abailable only for shipper role)"
        operationId: "addUser"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: " payload"
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                example: "Moving sofa"
              payload:
                type: "number"
                example: 100
              pickup_address:
                type: "string"
                example: "Flat 25, 12/F, Acacia Building 150 Kennedy Road"
              delivery_address:
                type: "string"
                example: "Sr. Rodrigo Domínguez Av. Bellavista N° 185"
              dimensions:
                type: "object"
                properties: 
                  width:
                    type: "number"
                    example: 44
                  length:
                    type: "number"
                    example: 32
                  height:
                    type: "number"
                    example: 66
        responses:
            "200":
                description: "Success"
                schema:
                    type: "object"
                    properties:
                      message: 
                        type: string
                        example: " created successfully"
            "400":
                description: "Bad request"
                schema:
                    $ref: '#/definitions/Error'
            "500":
                description: "Internal server error"
                schema:
                    $ref: '#/definitions/Error'
        security:
        - jwt_token: []
  /api/tasks/active:
    get:
      tags:
      - ""
      summary: "Get user's active task(if exists)"
      description: "Retrieve the active task for authorized driver(available only for driver)"
      operationId: "getUserTaskActive"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
          schema:
            type: "object"
            properties: 
                task:
                    type: object
                    $ref: "#/definitions/"
        "400":
          description: "Bad request"
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: "Internal server error"
          schema:
            $ref: '#/definitions/Error'
      security:
      - jwt_token: []
  /api/tasks/active/state:
    patch:
      tags:
      - ""
      summary: "Iterate to next  state"
      description: "Iterate to next  state(available only for driver)"
      operationId: "iterateTaskState"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
            description: "Success"
            schema:
                type: "object"
                properties:
                  message: 
                    type: string
                    example: " state changed to 'En route to Delivery'"
        "400":
          description: "Bad request"
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: "Internal server error"
          schema:
            $ref: '#/definitions/Error'
      security:
      - jwt_token: []
  /api/tasks/{id}:
    get:
        tags:
        - ""
        summary: "Get user's  by id"
        description: "Get user's  by id"
        operationId: "getUserTaskById"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "id"
          description: " id"
          required: true
          type: string
        responses:
            "200":
              description: "Success"
              schema:
                type: object
                properties:
                  task:
                      $ref: '#/definitions/'
            "400":
              description: "Bad request"
              schema:
                  $ref: '#/definitions/Error'
            "500":
              description: "Internal server error"
              schema:
                  $ref: '#/definitions/Error'
        security:
        - jwt_token: []
    put:
        tags:
        - ""
        summary: "Update user's task by id"
        description: "Update user's task by id (abailable only for shipper role)"
        operationId: "updateUserTaskById"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "id"
          description: " id"
          required: true
          type: string
        - in: "body"
          name: " payload"
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                example: "Moving sofa"
              payload:
                type: "number"
                example: 100
              pickup_address:
                type: "string"
                example: "Flat 25, 12/F, Acacia Building 150 Kennedy Road"
              delivery_address:
                type: "string"
                example: "Sr. Rodrigo Domínguez Av. Bellavista N° 185"
              dimensions:
                type: "object"
                properties: 
                  width:
                    type: "number"
                    example: 44
                  length:
                    type: "number"
                    example: 32
                  height:
                    type: "number"
                    example: 66
        responses:
            "200":
                description: "Success"
                schema:
                    type: "object"
                    properties:
                      message: 
                        type: string
                        example: " details changed successfully"
            "400":
              description: "Bad request"
              schema:
                  $ref: '#/definitions/Error'
            "500":
              description: "Internal server error"
              schema:
                  $ref: '#/definitions/Error'
        security:
        - jwt_token: []
    delete:
        tags:
        - ""
        summary: "Delete user's task by id"
        description: "Delete user's task by id (abailable only for shipper role)"
        operationId: "deleteUserTaskById"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "id"
          description: " id"
          required: true
          type: string
        responses:
            "200":
                description: "Success"
                schema:
                    type: "object"
                    properties:
                      message: 
                        type: string
                        example: " deleted successfully"
            "400":
              description: "Bad request"
              schema:
                  $ref: '#/definitions/Error'
            "500":
              description: "Internal server error"
              schema:
                  $ref: '#/definitions/Error'
        security:
        - jwt_token: []
  /api/tasks/{id}/post:
    post:
        tags:
        - ""
        summary: "Post a user's task by id"
        description: "Post a user's task by id, search for drivers (abailable only for shipper role)"
        operationId: "postUserTaskById"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "id"
          description: " id"
          required: true
          type: string
        responses:
            "200":
                description: "Success"
                schema:
                    type: "object"
                    properties:
                      message: 
                        type: string
                        example: " posted successfully"
                      driver_found: 
                        type: boolean
                        example: true
            "400":
              description: "Bad request"
              schema:
                  $ref: '#/definitions/Error'
            "500":
              description: "Internal server error"
              schema:
                  $ref: '#/definitions/Error'
        security:
        - jwt_token: []
  /api/tasks/{id}/shipping_info:
    get:
        tags:
        - ""
        summary: "Get user's  shipping info by id"
        description: "Get user's  shipping info by id, returns detailed info about shipment for active tasks (available only for shipper)"
        operationId: "getUserTaskDetailsById"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "id"
          description: " id"
          required: true
          type: string
        responses:
            "200":
              description: "Success"
              schema:
                type: object
                properties:
                  task:
                      $ref: '#/definitions/'
                  category:
                      $ref: '#/definitions/Category'
            "400":
              description: "Bad request"
              schema:
                  $ref: '#/definitions/Error'
            "500":
              description: "Internal server error"
              schema:
                  $ref: '#/definitions/Error'
        security:
        - jwt_token: []
securityDefinitions:
  jwt_token:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  Error:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Error message"
  Credentials:
    type: "object"
    properties:
      email:
        type: "string"
        example: "kyrylo@gmail.com"
      password:
        type: "string"
        example: "ve518dl3"
  registrationCredentials:
    type: "object"
    properties:
      email:
        type: "string"
        example: "kyrylo@gmail.com"
      password:
        type: "string"
        example: "ve518dl3"
      role:
        type: "string"
        enum: [SHIPPER, DRIVER]
        example: "SHIPPER"
  User:
    type: "object"
    properties:
      _id:
        type: "string"
        example: "5099803df3f4948bd2f98391"
      role:
        type: "string"
        example: "DRIVER"
      email:
        type: "string"
        example: "kyrylo@gmail.com"
      createdDate:
        type: "string"
        format: "date"
        example: "2020-10-28T08:03:19.814Z"
  Category:
    type: "object"
    properties:
      _id:
        type: "string"
        example: "5099803df3f4948bd2f98391"
      createdBy:
        type: "string"
        example: "5099803df3f4948bd2f98391"
      assigned_to:
        type: "string"
        example: "5099803df3f4948bd2f98391"
      type:
        type: "string"
        enum: ["SPRINTER", "SMALL STRAIGHT", "LARGE STRAIGHT"]
        example: "SPRINTER"
      status:
        type: "string"
        enum: ["OL", "IS"]
        example: "IS"
      createdDate:
        type: "string"
        format: "date"
        example: "2020-10-28T08:03:19.814Z"
  :
    type: "object"
    properties:
      _id:
        type: "string"
        example: "5099803df3f4948bd2f98391"
      createdBy:
        type: "string"
        example: "5099803df3f4948bd2f98391"
      assigned_to:
        type: "string"
        example: "5099803df3f4948bd2f98391"
      status:
        type: "string"
        enum: ["NEW", "POSTED", "ASSIGNED", "SHIPPED"]
        example: "NEW"
      state:
        type: "string"
        enum: ["En route to Pick Up", "Arrived to Pick Up", "En route to delivery", "Arrived to delivery"]
        example: "En route to Pick Up"
      name:
        type: "string"
        example: "Moving sofa"
      payload:
        type: "number"
        example: 100
      pickup_address:
        type: "string"
        example: "Flat 25, 12/F, Acacia Building 150 Kennedy Road"
      delivery_address:
        type: "string"
        example: "Sr. Rodrigo Domínguez Av. Bellavista N° 185"
      dimensions:
        type: "object"
        properties: 
          width:
            type: "number"
            example: 44
          length:
            type: "number"
            example: 32
          height:
            type: "number"
            example: 66
      logs:
        type: "array"
        items: 
          type: "object"
          properties:
            message:
              type: "string"
              example: " assigned to driver with id ###"
            time:
              type: "string"
              format: "date"
              example: "2020-10-28T08:03:19.814Z"
      createdDate:
        type: "string"
        format: "date"
        example: "2020-10-28T08:03:19.814Z"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"